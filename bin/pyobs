#!/usr/bin/env python3
#import locale
import matplotlib
import argparse
import os

from pyobs.application import Application, GuiApplication


# set locale to en_US on all systems
#locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')


# force matplotlib not to use a graphical interface
matplotlib.use('Agg')


def start_daemon(pid_file=None, *args, **kwargs):
    """Start process as a daemon.

    Args:
        pid_file: Name of PID file.
    """
    import daemon
    from daemon import pidfile

    # get run directory
    run_dir = os.path.dirname(pid_file)

    # This launches the daemon in its context
    with daemon.DaemonContext(
            working_directory=run_dir,
            umask=0o002,
            pidfile=pidfile.TimeoutPIDLockFile(pid_file)) as context:
        run(*args, **kwargs)


def run(config=None, log_file: str = None, log_level: str = 'info', log_rotate: bool = False, gui: bool = False,
        username: str = None, password: str = None, server: str = None, comm: str = 'xmpp', *args, **kwargs):
    """Run a pyobs application with the given options.

    Args:
        config: Name of config file, if any.
        log_file: Name of file to log to, if any.
        log_level: Logging level.
        log_rotate: Whether or not to rotate the logs.
        gui: Whether or not to show a GUI.
        username: Username for server connection (or given in config or environment).
        password: Password for server connection (or given in config or environment).
        server: Server to connect to (or given in config or environment).
        comm: Type of comm object to use (or given in config or environment), defaults to 'xmpp'.
    """

    # get app class
    App = GuiApplication if gui else Application

    # create app
    app = App(log_file, log_level, log_rotate)

    # run it
    app.run(config, username, password, server, comm)


def main():
    # init argument parsing
    parser = argparse.ArgumentParser()
    parser.add_argument('config', type=str, help='Configuration file', nargs='?')

    # logging
    parser.add_argument('--log-level', type=str, choices=['critical', 'error', 'warning', 'info', 'debug'],
                        default='info')
    parser.add_argument('-l', '--log-file', type=str, help='file to write log into')
    parser.add_argument('--log-rotate', action='store_true', help='rotate logs automatically')

    # write pid file as daemon
    parser.add_argument('-p', '--pid-file', type=str)

    # show gui
    parser.add_argument('--gui', action='store_true', help='run in a GUI instead of a terminal')

    # comm
    parser.add_argument('--username', type=str, help='Username for connecting to server')
    parser.add_argument('--password', type=str, help='Password for connecting to server')
    parser.add_argument('--server', type=str, help='server:port for server to connect to')
    parser.add_argument('--comm', type=str, choices=['xmpp'], default='xmpp')

    # parse args
    args = parser.parse_args()

    # --gui and --pid-file don't work together
    if args.gui and args.pid_file:
        print('--gui and --pid-file cannot be used together.')
        return

    # get full path of config
    if args.config:
        args.config = os.path.abspath(args.config)

    # run it
    if args.pid_file:
        start_daemon(**vars(args))
    else:
        run(**vars(args))


if __name__ == '__main__':
    main()
